import numpy as np
import numba as nb
import matplotlib.pyplot as plt
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è Numba
G = 9.81
K_BASE = 6e-05
RHO_STANDARD = 1.225


def measure_execution_time(func):
    def wrapper(*args, **kwargs):
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        exec_time = time.perf_counter() - start_time
        if func.__name__ != 'simulate_trajectory_numba':
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {func.__name__}: {exec_time:.4f} —Å–µ–∫—É–Ω–¥")
        return result

    return wrapper


@nb.njit(fastmath=True, parallel=True)
def find_optimal_angles(v0_corrected, k, distance, height_diff):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É–≥–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Numba"""
    result = np.zeros(900, dtype=np.float64)
    hit_result = np.zeros(900, dtype=np.bool_)

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª
    for i in nb.prange(900):
        angle = i * 0.1  # –æ—Ç 0 –¥–æ 90 —Å —à–∞–≥–æ–º 0.1
        trajectory, hit = simulate_trajectory_numba(v0_corrected, angle, k, distance, height_diff)
        result[i] = angle
        hit_result[i] = hit

    valid_indices = np.where(hit_result)[0]
    return result[valid_indices[0]] if len(valid_indices) > 0 else None


@nb.njit(fastmath=True, parallel=True)
def find_high_trajectory_angles(v0_corrected, k, distance, height_diff):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É–≥–ª–æ–≤ –≤—ã—Å–æ–∫–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    result = np.zeros(440, dtype=np.float64)
    hit_result = np.zeros(440, dtype=np.bool_)
    deviation_result = np.zeros(440, dtype=np.float64)

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª
    for i in nb.prange(440):
        angle = 45 + i * 0.1  # –æ—Ç 45 –¥–æ 89 —Å —à–∞–≥–æ–º 0.1
        trajectory, hit = simulate_trajectory_numba(v0_corrected, angle, k, distance, height_diff)
        result[i] = angle
        hit_result[i] = hit
        deviation_result[i] = abs(trajectory[-1, 0] - distance) + abs(
            trajectory[-1, 1] - height_diff) if hit else np.inf

    valid_indices = np.where(hit_result)[0]
    return result[valid_indices[np.argmin(deviation_result[valid_indices])]] if len(valid_indices) > 0 else None


@nb.njit(fastmath=True)
def simulate_trajectory_numba(v0, angle, k, target_distance, target_height, dt=0.01):
    """–í—ã—Å–æ–∫–æ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å Numba"""
    angle = np.radians(angle)
    vx, vz = v0 * np.cos(angle), v0 * np.sin(angle)
    x, z = 0.0, 0.0
    trajectory = np.zeros((10000, 2))
    idx = 0

    while x <= target_distance and z >= min(0, target_height):
        v = np.sqrt(vx ** 2 + vz ** 2)
        dvx_dt = -k * vx * v
        dvz_dt = -G - k * vz * v
        vx += dvx_dt * dt
        vz += dvz_dt * dt
        x += vx * dt
        z += vz * dt

        trajectory[idx] = [x, z]
        idx += 1

        if abs(x - target_distance) < 10.0 and abs(z - target_height) < 10.0:
            return trajectory[:idx], True

    return trajectory[:idx], False


@measure_execution_time
def find_optimal_angle(v0, distance, height_diff, temperature, pressure, k_base, plot=False):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–≥–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    pressure_pa = pressure * 100
    temperature_k = temperature + 273.15
    R = 287.05
    rho_calculated = pressure_pa / (R * temperature_k)
    rho_ratio = rho_calculated / RHO_STANDARD
    k = k_base * rho_ratio
    v0_corrected = v0 * np.sqrt((temperature + 273.15) / 288.15)

    optimal_angle = find_optimal_angles(v0_corrected, k, distance, height_diff)

    if plot and optimal_angle is not None:
        trajectory, _ = simulate_trajectory_numba(v0_corrected, optimal_angle, k, distance, height_diff)
        plt.figure(figsize=(10, 5))
        plt.plot(trajectory[:, 0], trajectory[:, 1], label=f"–£–≥–æ–ª: {optimal_angle:.2f}¬∞")
        plt.scatter(distance, height_diff, color='red', label='–¶–µ–ª—å')
        plt.xlabel("–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–º)")
        plt.ylabel("–í—ã—Å–æ—Ç–∞ (–º)")
        plt.title("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å–Ω–∞—Ä—è–¥–∞")
        plt.legend()
        plt.grid()
        plt.savefig("trajectory_plot.png")
        plt.close()

    return optimal_angle


@measure_execution_time
def find_high_trajectory(v0, distance, height_diff, temperature, pressure, k_base, plot=False):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã—Å–æ–∫–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    pressure_pa = pressure * 100
    temperature_k = temperature + 273.15
    R = 287.05
    rho_calculated = pressure_pa / (R * temperature_k)
    rho_ratio = rho_calculated / RHO_STANDARD
    k = k_base * rho_ratio
    v0_corrected = v0 * np.sqrt(temperature_k / 288.15)

    best_angle = find_high_trajectory_angles(v0_corrected, k, distance, height_diff)

    if plot and best_angle is not None:
        trajectory, _ = simulate_trajectory_numba(v0_corrected, best_angle, k, distance, height_diff)
        plt.figure(figsize=(10, 5))
        plt.plot(trajectory[:, 0], trajectory[:, 1], label=f"–í—ã—Å–æ–∫–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: {best_angle:.2f}¬∞")
        plt.scatter(distance, height_diff, color='red', label='–¶–µ–ª—å')
        plt.xlabel("–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–º)")
        plt.ylabel("–í—ã—Å–æ—Ç–∞ (–º)")
        plt.title("–í—ã—Å–æ–∫–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å–Ω–∞—Ä—è–¥–∞")
        plt.legend()
        plt.grid()
        plt.close()

    return best_angle


def main():
    print("üöÄ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–Ω–∞—Ä—è–¥–∞")
    print("------------------------------")

    # –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    v0 = float(input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å): "))
    distance = float(input("–í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ —Ü–µ–ª–∏ (–º): "))
    height_diff = float(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –≤—ã—Å–æ—Ç (–º): "))
    temperature = float(input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–∑–¥—É—Ö–∞ (¬∞C): "))
    pressure = float(input("–í–≤–µ–¥–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞): "))

    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—á–µ—Ç–∞
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª")
    print("2. –í—ã—Å–æ–∫–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è")
    mode = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1/2): ")

    # –ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞
    k_base = 6e-05

    try:
        if mode == '1':
            result = find_optimal_angle(v0, distance, height_diff, temperature, pressure, k_base, plot=True)
            print(f"\nüéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª: {result:.2f}¬∞")
        elif mode == '2':
            result = find_high_trajectory(v0, distance, height_diff, temperature, pressure, k_base, plot=True)
            print(f"\nüìê –£–≥–æ–ª –≤—ã—Å–æ–∫–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏: {result:.2f}¬∞")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º!")

    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")


if __name__ == "__main__":
    main()